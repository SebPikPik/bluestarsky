# This is a basic workflow to help you get started with Actions

name: Post to Blue Sky

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  rsi_status_bluesky:
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: Fetch RSS Feed
        uses: Promptly-Technologies-LLC/rss-fetch-action@v2
        with:
          feed_url: 'https://status.robertsspaceindustries.com/index.xml'
          file_path: './feed.json'

      - name: Take first URL of latest post
        run: |
          pip install html-to-json beautifulsoup4 requests

          echo "POST_TITLE=$(jq -r '.entries | max_by(.published) | .title' feed.json)" >> $GITHUB_ENV
          echo "POST_DATE=$(jq -r '.entries | max_by(.published) | .published' feed.json)" >> $GITHUB_ENV
          echo "LATEST_LINK=$(jq -r '.entries | max_by(.published) | .link' feed.json)" >> $GITHUB_ENV
          echo "LATEST_LINK_JSON=$(echo "$LATEST_LINK" | sed 's/\.html/.json/')" >> $GITHUB_ENV
          echo "The JSON link is: $LATEST_LINK_JSON"
          echo "JSON_POST=$(curl "$LATEST_LINK_JSON")" >> $GITHUB_ENV

          echo "LATEST_JSON_POST_TYPE=$(echo "$JSON_POST" | jq -r '.is')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_TYPE: $LATEST_JSON_POST_TYPE"

          echo "LATEST_JSON_POST_SEVERITY=$(echo "$JSON_POST" | jq -r '.severity')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_SEVERITY: $LATEST_JSON_POST_SEVERITY"

          echo "LATEST_JSON_POST_RESOLUTION=$(echo "$JSON_POST" | jq -r '.resolved')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_RESOLUTION: $LATEST_JSON_POST_RESOLUTION"

          echo "LATEST_JSON_POST_INFORMATIONAL=$(echo "$JSON_POST" | jq -r '.informational')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_INFORMATIONAL: $LATEST_JSON_POST_INFORMATIONAL"

          echo "LATEST_JSON_POST_RESOLV_DATE=$(echo "$JSON_POST" | jq -r '.resolvedAt')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_RESOLV_DATE: $LATEST_JSON_POST_RESOLV_DATE"

          echo "LATEST_JSON_POST_AFFECTED_ITEMS=$(echo "$JSON_POST" | jq -r '.affected | join(", ")')" >> $GITHUB_ENV
          echo "LATEST_JSON_POST_AFFECTED_ITEMS: $LATEST_JSON_POST_AFFECTED_ITEMS"
          echo "POST_DESC=$(jq -r '.entries | max_by(.published) | .description | gsub("`"; "\\\\\\\\\\\\`")' feed.json)" >> $GITHUB_ENV
          if [[ -z "$POST_DESC" ]]; then  # Use double brackets and quote the variable
              echo "POST_DESC is empty. Exiting."
              exit 1 # Indicate failure
          fi

      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Make Gemini cook a sentence
        id: gemini
        # shell: python
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg resolvedAt "$LATEST_JSON_POST_RESOLV_DATE" \
            --arg desc "$POST_DESC" \
            --arg date "$POST_DATE" \
            --arg type "$LATEST_JSON_POST_TYPE" \
            --arg affected "$LATEST_JSON_POST_AFFECTED_ITEMS" \
            '{contents: [{parts: [{text: ("Fais une phrase en francais à propos du status : " + ($desc | @json) + ". Cette phrase doit parler de l'\''etat des serveurs Star Citizen en utilisant le type " + ($type | @json) + " et s'\''il est possible de jouer en ce moment ou non. Il faut préciser les services affectés qui sont ($affected | @json) Cette réponse ne peut pas faire plus de 200 caractères. Il faut faire attention à la date et vérifier si la date en UTC " + ($resolvedAt | @json) + " n'\''est pas antérieur de plus de 1 jour à la date et heure d'\''aujourd'\''hui.")}]}]}')
          echo "JSON_PAYLOAD: $JSON_PAYLOAD"

          API_RESPONSE=$(curl -s \
                           -X POST \
                           -H "Content-Type: application/json" \
                           -d "$JSON_PAYLOAD" \
                           "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}")

          echo "API_RESPONSE: $API_RESPONSE" # Debugging line (important!)
          GEMINI_SENTENCE=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text') # Extract the sentence
          echo "GEMINI_SENTENCE: $GEMINI_SENTENCE" # Print for verification

          echo "GEMINI_SENTENCE=$GEMINI_SENTENCE" >> $GITHUB_ENV # Add to environment variables if needed

      # - name: Send Bluesky Post
      #   uses: myConsciousness/bluesky-post@v5
      #   with:
      #     identifier: ${{ secrets.BLUESKY_HANDLE }} # Your handle (example: username.bsky.social)
      #     password: ${{ secrets.BLUESKY_PASSWORD }} # Your password
      #     labels: "starcitizen,rsistatus"
      #     tags: "starcitizen,rsistatus,rsi"
      #     link-preview-url: "${{ steps.rss.outputs.url }}"
      #     text: |
      #       ${{ env.GEMINI_SENTENCE }} #StarCitizen

      #       Status : ${{ env.POST_LINK }} - Date : ${{ env.POST_DATE }}

      #       [Créez votre compte StarCitizen](https://shorturl.at/ItWLR)
