# This is a basic workflow to help you get started with Actions

name: Post to Blue Sky

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  rsi_status_bluesky:
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - name: Fetch RSS Feed
      #   uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      #   with:
      #     feed_url: 'https://status.robertsspaceindustries.com/index.xml'
      #     file_path: './feed.json'
    
      # - name: Commit and push changes to repository
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   with:
      #     commit_message: 'Update RSS feed'
      #     file_pattern: '*.json'
      
      - name: Parse entries
        run: |
          echo "POST_ID=$(cat feed.json | jq -r '.entries | max_by(.published) | .id')" >> $GITHUB_ENV
          echo "POST_TITLE=$(cat feed.json | jq -r '.entries | max_by(.published) | .title')" >> $GITHUB_ENV
          echo "POST_LINK=$(cat feed.json | jq -r '.entries | max_by(.published) | .link')" >> $GITHUB_ENV
          echo "POST_DATE=$(cat feed.json | jq -r '.entries | max_by(.published) | .published')" >> $GITHUB_ENV
          POST_DESC=$(jq -r '.entries | max_by(.published) | .description | gsub("`"; "\\\\\\\\\\\\`")' feed.json) # Correct escaping here
          echo "POST_DESC=$POST_DESC" >> $GITHUB_ENV  # Use direct assignment to GITHUB_ENV
          echo "POST_DESC content: $POST_DESC"
          # Simplified conditional check:
          if [[ -z "$POST_DESC" ]]; then  # Use double brackets and quote the variable
            echo "POST_DESC is empty. Exiting."
            exit 1 # Indicate failure
          fi
          
      - name: Make Gemini cook a sentence
        id: gemini
        # shell: python
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg desc "$POST_DESC" \
            --arg date "$POST_DATE" \
            '{contents: [{parts: [{text: ("Fais une phrase en francais à propos du status : " + ($desc | @json) + ". Cette phrase doit parler de l'\''etat des serveurs Star Citizen et s'\''il est possible de jouer en ce moment ou non. Cette réponse ne peut pas faire plus de 200 caractères. Il faut faire attention à la date et vérifier si la date " + ($date | @json) + " n'\''est pas antérieur de plus de 1 jour à la date d'\''aujourd'\''hui.")}]}]}')
          echo "JSON_PAYLOAD: $JSON_PAYLOAD"

          echo "API_RESPONSE: $API_RESPONSE" # Debugging line (important!)
          GEMINI_SENTENCE=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text') # Extract the sentence
          echo "GEMINI_SENTENCE: $GEMINI_SENTENCE" # Print for verification

          echo "GEMINI_SENTENCE=$GEMINI_SENTENCE" >> $GITHUB_ENV # Add to environment variables if needed

      # - name: Send Bluesky Post
      #   uses: myConsciousness/bluesky-post@v5
      #   with:
      #     identifier: ${{ secrets.BLUESKY_HANDLE }} # Your handle (example: username.bsky.social)
      #     password: ${{ secrets.BLUESKY_PASSWORD }} # Your password
      #     labels: "starcitizen,rsistatus"
      #     tags: "starcitizen,rsistatus,rsi"
      #     link-preview-url: "${{ steps.rss.outputs.url }}"
      #     text: |
      #       ${{ env.GEMINI_SENTENCE }} #StarCitizen
      #       Status : ${{ env.POST_LINK }} - Date : ${{ env.POST_DATE }}
      #       [Créez votre compte StarCitizen](https://shorturl.at/ItWLR)
